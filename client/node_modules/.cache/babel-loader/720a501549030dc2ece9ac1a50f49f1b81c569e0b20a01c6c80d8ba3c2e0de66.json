{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Projects/fitness-tracker/client/src/components/pages/ViewWorkouts.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ViewWorkoutsPage(props) {\n  _s();\n  function convertDate(aDate) {\n    const dates = {\n      \"01\": \"January\",\n      \"02\": \"February\",\n      \"03\": \"March\",\n      \"04\": \"April\",\n      \"05\": \"May\",\n      \"06\": \"June\",\n      \"07\": \"July\",\n      \"08\": \"August\",\n      \"09\": \"September\",\n      \"10\": \"October\",\n      \"11\": \"November\",\n      \"12\": \"December\"\n    };\n    let aDateArr = aDate.split(\"-\");\n    return `${dates[aDateArr[1]]} ${aDateArr[2]}, ${aDateArr[0]}`;\n  }\n  useEffect(() => {\n    console.log(\"Initial props:\", props.workouts);\n  }, []);\n  console.log(props.workouts);\n\n  // const workoutElements = Object.entries(props.workouts.workouts).map(([date, workoutSessions]) => (\n  //     <div key={date} className=\"workouts\">\n  //         <h1 className=\"view--workout-date\">\n  //             <div className=\"line\"></div>\n  //             {convertDate(date)}\n  //             <div className=\"line\"></div>\n  //             <button onClick={() => props.removeDateWorkouts(date)} className=\"remove-date-workouts\">X</button>\n  //         </h1>\n  //         {workoutSessions.map((workout, workoutIndex) => (\n  //             <div className=\"workout-grid-parent\">\n  //                 <div className=\"workout--info\">\n  //                     <div className=\"space\"></div>\n  //                     <h1 className=\"view--workout-index\">Workout #{workoutIndex + 1}</h1>\n  //                     <button type=\"button\" className=\"remove-workout\" onClick={() => {props.removeWorkout(date, workoutIndex)}}>X</button>\n  //                 </div>\n  //                 <div key={workout.id} className=\"workout-grid\">\n  //                     {workout.exercises.map((exercise, exerciseIndex) => (\n  //                         <div key={exerciseIndex} className=\"view--exercise-entry\">\n  //                             <h2>{exercise.name}</h2>\n  //                             {exercise.sets.map((set, setIndex) => {\n  //                                 let setElem;\n  //                                 switch(exercise.type) {\n  //                                     case \"time-based\":\n  //                                         setElem = (\n  //                                             <div key={setIndex} className=\"view--set\">\n  //                                                 <div className=\"view--time\">Time: {set.time}</div>\n  //                                             </div>\n  //                                         )\n  //                                         break;\n  //                                     case \"rep-based\":\n  //                                         setElem = (\n  //                                             <div key={setIndex} className=\"view--set\">\n  //                                                 <div className=\"view--reps\">Reps: {set.reps}</div>\n  //                                             </div>\n  //                                         )\n  //                                         break;\n  //                                     case \"weight-based\":\n  //                                         setElem = (\n  //                                             <div key={setIndex} className=\"view--set\">\n  //                                                 <div className=\"view--reps\">Reps: {set.reps}</div>\n  //                                                 <div className=\"view--weight\">Weight: {set.weight}</div>\n  //                                             </div>\n  //                                         )\n  //                                         break;\n  //                                     case \"distance-based\":\n  //                                         setElem = (\n  //                                             <div key={setIndex} className=\"view--set\">\n  //                                                 <div className=\"view--time\">Time: {set.time}</div>\n  //                                                 <div className=\"view--distance\">Distance: {set.distance}</div>\n  //                                             </div>\n  //                                         )\n  //                                         break;\n  //                                     default:\n  //                                         setElem = (\n  //                                             <div>Something went Wrong.</div>\n  //                                         )\n  //                                         break;\n  //                                 }\n  //                                 return setElem\n  //                             })}\n  //                         </div>\n  //                     ))}\n  //                 </div>\n  //             </div>\n  //         ))}\n\n  //     </div>\n  // ));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"parent\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n}\n_s(ViewWorkoutsPage, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ViewWorkoutsPage;\nvar _c;\n$RefreshReg$(_c, \"ViewWorkoutsPage\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","ViewWorkoutsPage","props","_s","convertDate","aDate","dates","aDateArr","split","console","log","workouts","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/kevin/Projects/fitness-tracker/client/src/components/pages/ViewWorkouts.js"],"sourcesContent":["import React, { useEffect} from \"react\";\n\nexport default function ViewWorkoutsPage (props) {\n    function convertDate(aDate) {\n        const dates = {\n            \"01\": \"January\",\n            \"02\": \"February\",\n            \"03\": \"March\",\n            \"04\": \"April\",\n            \"05\": \"May\",\n            \"06\": \"June\",\n            \"07\": \"July\",\n            \"08\": \"August\",\n            \"09\": \"September\",\n            \"10\": \"October\",\n            \"11\": \"November\",\n            \"12\": \"December\"\n        };\n    \n        let aDateArr = aDate.split(\"-\")\n        return `${dates[aDateArr[1]]} ${aDateArr[2]}, ${aDateArr[0]}`\n    }\n\n    useEffect(() => {\n        console.log(\"Initial props:\", props.workouts);\n    }, []);\n\n    console.log(props.workouts);\n\n\n    // const workoutElements = Object.entries(props.workouts.workouts).map(([date, workoutSessions]) => (\n    //     <div key={date} className=\"workouts\">\n    //         <h1 className=\"view--workout-date\">\n    //             <div className=\"line\"></div>\n    //             {convertDate(date)}\n    //             <div className=\"line\"></div>\n    //             <button onClick={() => props.removeDateWorkouts(date)} className=\"remove-date-workouts\">X</button>\n    //         </h1>\n    //         {workoutSessions.map((workout, workoutIndex) => (\n    //             <div className=\"workout-grid-parent\">\n    //                 <div className=\"workout--info\">\n    //                     <div className=\"space\"></div>\n    //                     <h1 className=\"view--workout-index\">Workout #{workoutIndex + 1}</h1>\n    //                     <button type=\"button\" className=\"remove-workout\" onClick={() => {props.removeWorkout(date, workoutIndex)}}>X</button>\n    //                 </div>\n    //                 <div key={workout.id} className=\"workout-grid\">\n    //                     {workout.exercises.map((exercise, exerciseIndex) => (\n    //                         <div key={exerciseIndex} className=\"view--exercise-entry\">\n    //                             <h2>{exercise.name}</h2>\n    //                             {exercise.sets.map((set, setIndex) => {\n    //                                 let setElem;\n    //                                 switch(exercise.type) {\n    //                                     case \"time-based\":\n    //                                         setElem = (\n    //                                             <div key={setIndex} className=\"view--set\">\n    //                                                 <div className=\"view--time\">Time: {set.time}</div>\n    //                                             </div>\n    //                                         )\n    //                                         break;\n    //                                     case \"rep-based\":\n    //                                         setElem = (\n    //                                             <div key={setIndex} className=\"view--set\">\n    //                                                 <div className=\"view--reps\">Reps: {set.reps}</div>\n    //                                             </div>\n    //                                         )\n    //                                         break;\n    //                                     case \"weight-based\":\n    //                                         setElem = (\n    //                                             <div key={setIndex} className=\"view--set\">\n    //                                                 <div className=\"view--reps\">Reps: {set.reps}</div>\n    //                                                 <div className=\"view--weight\">Weight: {set.weight}</div>\n    //                                             </div>\n    //                                         )\n    //                                         break;\n    //                                     case \"distance-based\":\n    //                                         setElem = (\n    //                                             <div key={setIndex} className=\"view--set\">\n    //                                                 <div className=\"view--time\">Time: {set.time}</div>\n    //                                                 <div className=\"view--distance\">Distance: {set.distance}</div>\n    //                                             </div>\n    //                                         )\n    //                                         break;\n    //                                     default:\n    //                                         setElem = (\n    //                                             <div>Something went Wrong.</div>\n    //                                         )\n    //                                         break;\n    //                                 }\n    //                                 return setElem\n    //                             })}\n    //                         </div>\n    //                     ))}\n    //                 </div>\n    //             </div>\n    //         ))}\n\n    //     </div>\n    // ));\n\n    \n    return (\n        <div className=\"parent\">\n            {/* {workoutElements.length > 0 ? workoutElements : <h1 className=\"no-workouts\">No workouts found.</h1>}\n            {workoutElements.length > 0 &&         \n                <button \n                    type=\"button\"\n                    className=\"delete-data-button\"\n                    onClick={props.clearWorkouts}\n                >\n                    Delete All Workouts\n                </button>\n            } */}\n        </div>\n    )\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,eAAe,SAASC,gBAAgBA,CAAEC,KAAK,EAAE;EAAAC,EAAA;EAC7C,SAASC,WAAWA,CAACC,KAAK,EAAE;IACxB,MAAMC,KAAK,GAAG;MACV,IAAI,EAAE,SAAS;MACf,IAAI,EAAE,UAAU;MAChB,IAAI,EAAE,OAAO;MACb,IAAI,EAAE,OAAO;MACb,IAAI,EAAE,KAAK;MACX,IAAI,EAAE,MAAM;MACZ,IAAI,EAAE,MAAM;MACZ,IAAI,EAAE,QAAQ;MACd,IAAI,EAAE,WAAW;MACjB,IAAI,EAAE,SAAS;MACf,IAAI,EAAE,UAAU;MAChB,IAAI,EAAE;IACV,CAAC;IAED,IAAIC,QAAQ,GAAGF,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC;IAC/B,OAAQ,GAAEF,KAAK,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAE,IAAGA,QAAQ,CAAC,CAAC,CAAE,KAAIA,QAAQ,CAAC,CAAC,CAAE,EAAC;EACjE;EAEAT,SAAS,CAAC,MAAM;IACZW,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAER,KAAK,CAACS,QAAQ,CAAC;EACjD,CAAC,EAAE,EAAE,CAAC;EAENF,OAAO,CAACC,GAAG,CAACR,KAAK,CAACS,QAAQ,CAAC;;EAG3B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAGA,oBACIX,OAAA;IAAKY,SAAS,EAAC;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAWlB,CAAC;AAEd;AAACb,EAAA,CAhHuBF,gBAAgB;AAAAgB,EAAA,GAAhBhB,gBAAgB;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}