{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Projects/fitness-tracker/client/src/components/pages/AddWorkout.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useReducer } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCircleXmark, faPlus, faMinus } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultForm = {\n  date: \"\",\n  exercises: []\n};\nexport default function AddWorkoutPage(props) {\n  _s();\n  const debug = false;\n  const exerciseNameRegex = /^[A-Za-z ]{0,20}$/;\n  const digitRegex = /^\\d{0,4}$/;\n  const [touched, setTouched] = React.useState({});\n  const [validationErrors, setValidationErrors] = React.useState({});\n  const [formData, setFormData] = React.useState(defaultForm);\n  function addExercise() {\n    setFormData(prevFormData => ({\n      ...prevFormData,\n      exercises: [...prevFormData.exercises, {\n        name: \"\",\n        type: \"weight-based\",\n        sets: [{\n          reps: \"\",\n          weight: \"\"\n        }]\n      }]\n    }));\n  }\n  function addSet(index) {\n    setFormData(prevFormData => {\n      const updatedExercises = [...prevFormData.exercises];\n      const currType = updatedExercises[index].type;\n      console.log(\"adding set at \", index);\n      let newSet;\n      switch (currType) {\n        case \"time-based\":\n          newSet = {\n            time: \"\"\n          };\n          break;\n        case \"rep-based\":\n          newSet = {\n            reps: \"\"\n          };\n          break;\n        case \"distance-based\":\n          newSet = {\n            distance: \"\",\n            time: \"\"\n          };\n          break;\n        case \"weight-based\":\n          newSet = {\n            weight: \"\",\n            reps: \"\"\n          };\n          break;\n        default:\n          console.log(\"something wrong happened\");\n          break;\n      }\n      updatedExercises[index].sets.push(newSet);\n      return {\n        ...prevFormData,\n        exercises: updatedExercises\n      };\n    });\n  }\n  function rmExercise(index) {\n    setFormData(prevFormData => {\n      // Creating a deep copy of the exercises array\n      const updatedExercises = prevFormData.exercises.map(ex => ({\n        ...ex\n      }));\n      updatedExercises.splice(index, 1);\n      return {\n        ...prevFormData,\n        exercises: updatedExercises\n      };\n    });\n  }\n  function rmSet(exerciseIndex, setIndex) {\n    setFormData(prevFormData => {\n      console.log(exerciseIndex, setIndex);\n      const updatedExercises = [...prevFormData.exercises];\n      const updatedSets = [...updatedExercises[exerciseIndex].sets];\n      updatedSets.splice(setIndex, 1);\n      updatedExercises[exerciseIndex] = {\n        ...updatedExercises[exerciseIndex],\n        sets: updatedSets\n      };\n      return {\n        ...prevFormData,\n        exercises: updatedExercises\n      };\n    });\n  }\n  function handleDateChange(event) {\n    setTouched({\n      ...touched,\n      [`date`]: true\n    });\n    let errors = {\n      ...validationErrors\n    };\n    if (event.target.value === \"\") {\n      errors['date'] = \"Date must be included\";\n    } else {\n      delete errors['date'];\n    }\n    setValidationErrors(errors);\n    let dateValue = event.target.value;\n    let year = dateValue.split('-')[0];\n    if (year.length > 4) {\n      year = year.substring(0, 4);\n      dateValue = year + '-' + dateValue.split('-').slice(1).join('-');\n    }\n    setFormData(prevFormData => ({\n      ...prevFormData,\n      date: dateValue\n    }));\n  }\n  function handleExerciseNameChange(index) {\n    return event => {\n      setTouched({\n        ...touched,\n        [`name_${index}`]: true\n      });\n      const newName = event.target.value;\n      let errors = {\n        ...validationErrors\n      };\n      if (newName === \"\") {\n        errors[`name_${index}`] = \"Exercise name must not be empty\";\n      } else {\n        delete errors[`name_${index}`];\n        const nameExists = formData.exercises.some((exercise, i) => i !== index && exercise.name === newName);\n        if (nameExists) {\n          errors[`name_${index}`] = `\"${newName}\" is already taken`;\n        }\n      }\n      setValidationErrors(errors);\n      if (exerciseNameRegex.test(newName)) {\n        const newExercises = formData.exercises.map((exercise, i) => {\n          if (i === index) {\n            return {\n              ...exercise,\n              name: newName\n            };\n          }\n          return exercise;\n        });\n        setFormData(prevFormData => ({\n          ...prevFormData,\n          exercises: newExercises\n        }));\n      }\n    };\n  }\n  function handleExerciseTypeChange(index) {\n    return event => {\n      const newType = event.target.value;\n      setFormData(prevFormData => {\n        const updatedExercises = [...prevFormData.exercises];\n        let defaultSet = {};\n        switch (newType) {\n          case \"time-based\":\n            defaultSet = {\n              time: \"\"\n            };\n            break;\n          case \"rep-based\":\n            defaultSet = {\n              reps: \"\"\n            };\n            break;\n          case \"distance-based\":\n            defaultSet = {\n              distance: \"\",\n              time: \"\"\n            };\n            break;\n          case \"weight-based\":\n            defaultSet = {\n              weight: \"\",\n              reps: \"\"\n            };\n            break;\n          default:\n            console.error(\"Unrecognized exercise type\");\n            break;\n        }\n        updatedExercises[index] = {\n          ...updatedExercises[index],\n          type: newType,\n          sets: [defaultSet]\n        };\n        return {\n          ...prevFormData,\n          exercises: updatedExercises\n        };\n      });\n    };\n  }\n  function handleSetInfoChange(exerciseIndex, setIndex) {\n    return event => {\n      if (digitRegex.test(event.target.value) || event.target.value === \"\") {\n        setTouched({\n          ...touched,\n          [`set_${exerciseIndex}_${setIndex}`]: true\n        });\n        setFormData(prevFormData => {\n          const newExercises = [...prevFormData.exercises];\n          const setToUpdate = {\n            ...newExercises[exerciseIndex].sets[setIndex]\n          };\n          setToUpdate[event.target.id] = event.target.value === \"\" ? \"\" : Number(event.target.value);\n          let errors = {\n            ...validationErrors\n          };\n          if (newExercises[exerciseIndex].type === \"weight-based\" && setToUpdate.reps === \"\") {\n            errors[`set_${exerciseIndex}_${setIndex}`] = \"Reps must not be empty\";\n          } else {\n            delete errors[`set_${exerciseIndex}_${setIndex}`];\n          }\n          newExercises[exerciseIndex].sets[setIndex] = setToUpdate;\n          setValidationErrors(errors);\n          return {\n            ...prevFormData,\n            exercises: newExercises\n          };\n        });\n      }\n    };\n  }\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    // Check for validation errors\n    let errors = {};\n    let nameSet = new Set(); // To track unique names\n\n    if (!formData.date) {\n      errors[\"date\"] = \"Date must be included\";\n    }\n    if (formData.exercises.length === 0) {\n      errors[\"empty\"] = \"There must be at least one exercise.\";\n    }\n    formData.exercises.forEach((exercise, index) => {\n      if (exercise.name === \"\") {\n        errors[`name_${index}`] = \"Name must not be empty\";\n      } else if (nameSet.has(exercise.name)) {\n        errors[`name_${index}`] = `${exercise.name} is already taken`;\n      } else {\n        nameSet.add(exercise.name);\n      }\n      exercise.sets.forEach((set, setIndex) => {\n        if (set.reps === \"0\" || set.reps === \"\") {\n          errors[`set_${index}_${setIndex}`] = \"Reps can't be 0\";\n        }\n      });\n    });\n\n    // Check if there are any errors\n    if (Object.keys(errors).length === 0) {\n      const newWorkout = {\n        id: Date.now().toString(),\n        exercises: formData.exercises\n      };\n      props.addWorkout(formData.date, newWorkout);\n      console.log('finished adding');\n      setFormData({\n        date: \"\",\n        exercises: []\n      }); // Reset form\n      setValidationErrors({}); // Clear validation errors\n    } else {\n      console.log(errors);\n      setValidationErrors(errors);\n    }\n  }\n  function clearForm() {\n    setFormData({\n      date: \"\",\n      exercises: []\n    });\n  }\n  const formDataExerciseElements = formData.exercises.map((exercise, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exercise\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exercise-input-row1\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"exercise-name\",\n        type: \"text\",\n        placeholder: \"Exercise Name\",\n        value: exercise.name,\n        onChange: handleExerciseNameChange(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => rmExercise(index),\n        className: \"remove-exercise-button\",\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"minus-icon\",\n          icon: faMinus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exercise-type-dropdown-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"exercise-types-label\",\n        htmlFor: \"exercise-types\",\n        children: \"Choose Exercise Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"exercise-types\",\n        id: \"exercise-types\",\n        value: exercise.type,\n        onChange: handleExerciseTypeChange(index),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"time-based\",\n          children: \"Time-Based\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"rep-based\",\n          children: \"Rep-Based\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"distance-based\",\n          children: \"Distance-Bassed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"weight-based\",\n          children: \"Weight-Based\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 13\n    }, this), validationErrors[`name_${index}`] && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"validation-error\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"x-icon\",\n        icon: faCircleXmark\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 21\n      }, this), validationErrors[`name_${index}`]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sets-elements\",\n      children: exercise.sets.map((set, setIndex) => {\n        let thingToRender;\n        switch (exercise.type) {\n          case \"time-based\":\n            thingToRender = /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"set\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"set--time\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"time\",\n                  className: \"time-label\",\n                  children: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 336,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"time-input\",\n                  id: \"time\",\n                  type: \"text\",\n                  placeholder: \"0\",\n                  value: set.time,\n                  onChange: handleSetInfoChange(index, setIndex)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 339,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 37\n            }, this);\n            break;\n          case \"rep-based\":\n            thingToRender = /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"set\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"set--reps\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"reps\",\n                  className: \"reps-label\",\n                  children: \"Reps\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 356,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"reps-input\",\n                  id: \"reps\",\n                  type: \"text\",\n                  placeholder: \"0\",\n                  value: set.reps,\n                  onChange: handleSetInfoChange(index, setIndex)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 359,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 37\n            }, this);\n            break;\n          case \"distance-based\":\n            thingToRender = /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"set\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"set--distance\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"distance\",\n                  className: \"distance-label\",\n                  children: \"Distance\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 378,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"distance-input\",\n                  id: \"distance\",\n                  type: \"text\",\n                  placeholder: \"0\",\n                  value: set.distance,\n                  onChange: handleSetInfoChange(index, setIndex)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 377,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"set--time\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"time\",\n                  className: \"time-label\",\n                  children: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 391,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"time-time\",\n                  id: \"time\",\n                  type: \"text\",\n                  placeholder: \"0\",\n                  value: set.time,\n                  onChange: handleSetInfoChange(index, setIndex)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 394,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 37\n            }, this);\n            break;\n          case \"weight-based\":\n            thingToRender = /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"set\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"set--weight\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"weight\",\n                  className: \"weight-label\",\n                  children: \"Weight\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 411,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"weight\",\n                  className: \"weight-input\",\n                  type: \"text\",\n                  placeholder: \"0\",\n                  value: set.weight,\n                  onChange: handleSetInfoChange(index, setIndex)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 414,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"set--reps\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"reps\",\n                  className: \"reps-label\",\n                  children: \"Reps\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 425,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"reps-input\",\n                  id: \"reps\",\n                  type: \"text\",\n                  placeholder: \"0\",\n                  value: set.reps,\n                  onChange: handleSetInfoChange(index, setIndex)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 428,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 37\n            }, this);\n            break;\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"set\",\n            children: [thingToRender, setIndex === exercise.sets.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => addSet(index),\n              className: \"add-set-button\",\n              children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                className: \"plus-icon\",\n                icon: faPlus\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 450,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => rmSet(index, setIndex),\n              className: \"remove-set-button\",\n              children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                className: \"minus-icon\",\n                icon: faMinus\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 33\n          }, this), validationErrors[`set_${index}_${setIndex}`] && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"validation-error\",\n            children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              className: \"x-icon\",\n              icon: faCircleXmark\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 41\n            }, this), validationErrors[`set_${index}_${setIndex}`]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 13\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"parent\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"addworkout--form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Add Workout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"date-input-label\",\n        htmlFor: \"date-input\",\n        children: \"Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"date-input\",\n        id: \"date-input\",\n        type: \"date\",\n        value: formData.date,\n        onChange: handleDateChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 17\n      }, this), validationErrors[\"date\"] && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"validation-error\",\n        children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"x-icon\",\n          icon: faCircleXmark\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 25\n        }, this), validationErrors[\"date\"]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"add-exercise-button\",\n        type: \"button\",\n        onClick: addExercise,\n        children: \"Add Exercise\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 17\n      }, this), formDataExerciseElements, validationErrors[\"empty\"] && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"validation-error\",\n        children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"x-icon\",\n          icon: faCircleXmark\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 25\n        }, this), validationErrors[\"empty\"]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: clearForm,\n        className: \"submit--button\",\n        children: \"Clear Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit--button\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 475,\n    columnNumber: 9\n  }, this);\n}\n_s(AddWorkoutPage, \"obqbzEBye4lsmeFP9oxg8wx/C7k=\");\n_c = AddWorkoutPage;\nvar _c;\n$RefreshReg$(_c, \"AddWorkoutPage\");","map":{"version":3,"names":["React","useEffect","useReducer","FontAwesomeIcon","faCircleXmark","faPlus","faMinus","jsxDEV","_jsxDEV","defaultForm","date","exercises","AddWorkoutPage","props","_s","debug","exerciseNameRegex","digitRegex","touched","setTouched","useState","validationErrors","setValidationErrors","formData","setFormData","addExercise","prevFormData","name","type","sets","reps","weight","addSet","index","updatedExercises","currType","console","log","newSet","time","distance","push","rmExercise","map","ex","splice","rmSet","exerciseIndex","setIndex","updatedSets","handleDateChange","event","errors","target","value","dateValue","year","split","length","substring","slice","join","handleExerciseNameChange","newName","nameExists","some","exercise","i","test","newExercises","handleExerciseTypeChange","newType","defaultSet","error","handleSetInfoChange","setToUpdate","id","Number","handleSubmit","preventDefault","nameSet","Set","forEach","has","add","set","Object","keys","newWorkout","Date","now","toString","addWorkout","clearForm","formDataExerciseElements","className","children","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","icon","htmlFor","thingToRender","onSubmit","_c","$RefreshReg$"],"sources":["/home/kevin/Projects/fitness-tracker/client/src/components/pages/AddWorkout.js"],"sourcesContent":["import React, { useEffect, useReducer } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCircleXmark, faPlus, faMinus } from '@fortawesome/free-solid-svg-icons'\n\nconst defaultForm = {\n    date : \"\",  \n    exercises : []\n}\n\n\nexport default function AddWorkoutPage (props) {\n    const debug = false\n    const exerciseNameRegex = /^[A-Za-z ]{0,20}$/;\n    const digitRegex = /^\\d{0,4}$/;\n\n    const [touched, setTouched] = React.useState({})\n    const [validationErrors, setValidationErrors] = React.useState({})\n    const [formData, setFormData] = React.useState(defaultForm)\n    \n    function addExercise () {\n        setFormData((prevFormData) => ({\n            ...prevFormData,\n            exercises : [\n                ...prevFormData.exercises,\n                {\n                    name : \"\",\n                    type: \"weight-based\",\n                    sets : [{reps: \"\", weight: \"\"}]\n                }\n            ]\n        }))\n    }\n    \n    function addSet(index) {\n        setFormData(prevFormData => {\n\n            const updatedExercises = [...prevFormData.exercises]\n            const currType = updatedExercises[index].type\n            console.log(\"adding set at \", index)\n            \n            let newSet;\n            switch (currType) {\n                case \"time-based\":\n                    newSet = {\n                        time: \"\"\n                    }\n                    break;\n                case \"rep-based\":\n                    newSet = {\n                        reps: \"\"\n                    }\n                    break;\n                case \"distance-based\":\n                    newSet = {\n                        distance: \"\",\n                        time: \"\"\n                    }\n                    break;\n                case \"weight-based\":\n                    newSet = {\n                        weight: \"\",\n                        reps: \"\"\n                    }\n                    break;\n                default:\n                    console.log(\"something wrong happened\")\n                    break\n            }\n            \n            updatedExercises[index].sets.push(newSet)\n            return {\n                ...prevFormData,\n                exercises: updatedExercises\n            }\n\n        })\n    }\n    \n    function rmExercise(index) {\n        setFormData(prevFormData => {\n            // Creating a deep copy of the exercises array\n            const updatedExercises = prevFormData.exercises.map(ex => ({ ...ex }));\n            updatedExercises.splice(index, 1); \n            \n            return {\n                ...prevFormData,\n                exercises: updatedExercises\n            };\n        });\n    }\n\n    function rmSet(exerciseIndex, setIndex) {\n        setFormData(prevFormData => {\n            console.log(exerciseIndex, setIndex)\n            const updatedExercises = [...prevFormData.exercises]\n            const updatedSets = [...updatedExercises[exerciseIndex].sets]\n            updatedSets.splice(setIndex, 1)\n            \n            updatedExercises[exerciseIndex] = {\n                ...updatedExercises[exerciseIndex],\n                sets: updatedSets\n            }\n            \n            return {\n                ...prevFormData,\n                exercises: updatedExercises\n            }\n        })    \n    }\n    \n    function handleDateChange(event) {\n        setTouched({...touched, [`date`]: true})\n\n        let errors = {...validationErrors}\n        if (event.target.value === \"\") {\n            errors['date'] = \"Date must be included\"\n        } else {\n            delete errors['date']\n        }\n        setValidationErrors(errors)\n\n        let dateValue = event.target.value;\n        let year = dateValue.split('-')[0];\n    \n        if (year.length > 4) {\n            year = year.substring(0, 4);\n            dateValue = year + '-' + dateValue.split('-').slice(1).join('-');\n        }\n    \n    \n        setFormData(prevFormData => ({\n            ...prevFormData,\n            date: dateValue\n        }));\n    }\n    \n    function handleExerciseNameChange(index) {\n        return (event) => {\n            setTouched({ ...touched, [`name_${index}`]: true });\n            \n            const newName = event.target.value\n            let errors = {...validationErrors}\n\n            if (newName === \"\") {\n                errors[`name_${index}`] = \"Exercise name must not be empty\"\n            } else {\n                delete errors[`name_${index}`]\n\n                const nameExists = formData.exercises.some((exercise, i) => i !== index && exercise.name === newName);\n                if (nameExists) {\n                    errors[`name_${index}`] = `\"${newName}\" is already taken`\n                }\n            }\n            setValidationErrors(errors)\n\n            if (exerciseNameRegex.test(newName)) {\n                const newExercises = formData.exercises.map((exercise, i) => {\n                    if (i === index) {\n                        return { ...exercise, name: newName };\n                    }\n                    return exercise;\n                });\n                setFormData(prevFormData => ({ ...prevFormData, exercises: newExercises }));\n            }\n        };\n    }\n\n    function handleExerciseTypeChange(index) {\n        return (event) => {\n            const newType = event.target.value;\n            setFormData(prevFormData => {\n                const updatedExercises = [...prevFormData.exercises];\n                let defaultSet = {};\n\n                switch (newType) {\n                    case \"time-based\":\n                        defaultSet = { time: \"\" };\n                        break;\n                    case \"rep-based\":\n                        defaultSet = { reps: \"\" };\n                        break;\n                    case \"distance-based\":\n                        defaultSet = { distance: \"\", time: \"\" };\n                        break;\n                    case \"weight-based\":\n                        defaultSet = { weight: \"\", reps: \"\" };\n                        break;\n                    default:\n                        console.error(\"Unrecognized exercise type\");\n                        break;\n                }\n\n                updatedExercises[index] = {\n                    ...updatedExercises[index],\n                    type: newType,\n                    sets: [defaultSet]\n                };\n\n                return { ...prevFormData, exercises: updatedExercises };\n            });\n        };\n    }\n    \n    function handleSetInfoChange(exerciseIndex, setIndex) {\n        return (event) => {\n            if (digitRegex.test(event.target.value) || event.target.value === \"\") {\n                setTouched({...touched, [`set_${exerciseIndex}_${setIndex}`]: true})\n                setFormData(prevFormData => {\n                    \n                    const newExercises = [...prevFormData.exercises];\n                    const setToUpdate = { ...newExercises[exerciseIndex].sets[setIndex] };\n                    \n                    \n                    setToUpdate[event.target.id] = event.target.value === \"\" ? \"\" : Number(event.target.value);\n                    \n                    let errors = {...validationErrors}\n                    if (newExercises[exerciseIndex].type === \"weight-based\" && setToUpdate.reps === \"\") {\n                        errors[`set_${exerciseIndex}_${setIndex}`] = \"Reps must not be empty\"\n                    } else {\n                        delete errors[`set_${exerciseIndex}_${setIndex}`]\n                    }\n                    newExercises[exerciseIndex].sets[setIndex] = setToUpdate;\n                    setValidationErrors(errors)\n                    \n    \n                    return { ...prevFormData, exercises: newExercises };\n                });\n            }\n        };\n    }\n    \n    \n    function handleSubmit(event) {\n        event.preventDefault();\n\n        // Check for validation errors\n        let errors = {};\n        let nameSet = new Set(); // To track unique names\n\n        if (!formData.date) {\n            errors[\"date\"] = \"Date must be included\"\n        }\n\n        if (formData.exercises.length === 0) {\n            errors[\"empty\"] = \"There must be at least one exercise.\"\n        }\n\n        formData.exercises.forEach((exercise, index) => {\n            if (exercise.name === \"\") {\n                errors[`name_${index}`] = \"Name must not be empty\";\n            } else if (nameSet.has(exercise.name)) {\n                errors[`name_${index}`] = `${exercise.name} is already taken`;\n            } else {\n                nameSet.add(exercise.name);\n            }\n\n            exercise.sets.forEach((set, setIndex) => {\n                if (set.reps === \"0\" || set.reps === \"\") {\n                    errors[`set_${index}_${setIndex}`] = \"Reps can't be 0\";\n                }\n            });\n        });\n\n        // Check if there are any errors\n        if (Object.keys(errors).length === 0) {\n            \n            const newWorkout = { \n                id: Date.now().toString(),  \n                exercises: formData.exercises\n            };\n\n            props.addWorkout(formData.date, newWorkout);\n            console.log('finished adding')\n            setFormData({ date: \"\", exercises: [] }); // Reset form\n            setValidationErrors({}); // Clear validation errors\n        } else {\n            console.log(errors)\n            setValidationErrors(errors);\n        }\n    }\n\n    function clearForm() {\n        setFormData({\n            date : \"\",  \n            exercises : []\n        })\n    }\n\n    const formDataExerciseElements = formData.exercises.map((exercise, index) => (\n        <div key={index} className=\"exercise\">\n            <div className=\"exercise-input-row1\">\n                <input\n                    className=\"exercise-name\"\n                    type=\"text\"\n                    placeholder=\"Exercise Name\"\n                    value={exercise.name}\n                    onChange={handleExerciseNameChange(index)}\n                />\n                <button type=\"button\" onClick={() => rmExercise(index)} className=\"remove-exercise-button\">\n                    <FontAwesomeIcon className=\"minus-icon\" icon={faMinus} />\n                </button>\n            </div>\n            <div className=\"exercise-type-dropdown-container\">\n                <label className=\"exercise-types-label\" htmlFor=\"exercise-types\">Choose Exercise Type:</label>\n                <select \n                    className=\"exercise-types\" \n                    id=\"exercise-types\"\n                    value={exercise.type}\n                    onChange={handleExerciseTypeChange(index)}\n                >\n                    <option value=\"time-based\">Time-Based</option>\n                    <option value=\"rep-based\">Rep-Based</option>\n                    <option value=\"distance-based\">Distance-Bassed</option>\n                    <option value=\"weight-based\">Weight-Based</option>\n                </select>\n\n            </div>\n            {\n                validationErrors[`name_${index}`] \n                && \n                <div className=\"validation-error\">\n                    <FontAwesomeIcon className=\"x-icon\" icon={faCircleXmark} />\n                    {validationErrors[`name_${index}`]}\n                </div>\n            }\n\n            <div className=\"sets-elements\">\n                {\n                    exercise.sets.map((set, setIndex) => {\n                        let thingToRender;\n                        switch(exercise.type) {\n                            case \"time-based\":\n                                thingToRender = (\n                                    <div className=\"set\">\n                                        <div className=\"set--time\">\n                                            <label htmlFor=\"time\" className=\"time-label\">\n                                                Time\n                                            </label>\n                                            <input\n                                                className=\"time-input\"\n                                                id=\"time\" \n                                                type=\"text\"\n                                                placeholder=\"0\"\n                                                value={set.time}\n                                                onChange={handleSetInfoChange(index, setIndex)}\n                                            />\n                                        </div>\n                                    </div>\n                                )\n                                break;\n\n                            case \"rep-based\":\n                                thingToRender = (\n                                    <div className=\"set\">\n                                        <div className=\"set--reps\">\n                                            <label htmlFor=\"reps\" className=\"reps-label\">\n                                                Reps\n                                            </label>\n                                            <input\n                                                className=\"reps-input\"\n                                                id=\"reps\" \n                                                type=\"text\"\n                                                placeholder=\"0\"\n                                                value={set.reps}\n                                                onChange={handleSetInfoChange(index, setIndex)}\n                                            />\n                                        </div>\n\n                                    </div>\n                                )\n                                break;\n\n                            case \"distance-based\":\n                                thingToRender = (\n                                    <div className=\"set\">\n        \n                                        <div className=\"set--distance\">\n                                            <label htmlFor=\"distance\" className=\"distance-label\">\n                                                Distance\n                                            </label>\n                                            <input\n                                                className=\"distance-input\"\n                                                id=\"distance\" \n                                                type=\"text\"\n                                                placeholder=\"0\"\n                                                value={set.distance}\n                                                onChange={handleSetInfoChange(index, setIndex)}\n                                            />\n                                        </div>\n                                        <div className=\"set--time\">\n                                            <label htmlFor=\"time\" className=\"time-label\">\n                                                Time\n                                            </label>\n                                            <input\n                                                className=\"time-time\"\n                                                id=\"time\" \n                                                type=\"text\"\n                                                placeholder=\"0\"\n                                                value={set.time}\n                                                onChange={handleSetInfoChange(index, setIndex)}\n                                            />\n                                        </div>\n                                    </div>\n                                )\n                                break;\n\n                            case \"weight-based\":\n                                thingToRender = (\n                                    <div className=\"set\">\n                                        <div className=\"set--weight\">\n                                            <label htmlFor=\"weight\" className=\"weight-label\">\n                                                Weight\n                                            </label>\n                                            <input\n                                                id=\"weight\"\n                                                className=\"weight-input\"\n                                                type=\"text\"\n                                                placeholder=\"0\"\n                                                value={set.weight}\n                                                onChange={handleSetInfoChange(index, setIndex)}\n                                            />\n        \n                                        </div>\n                                        <div className=\"set--reps\">\n                                            <label htmlFor=\"reps\" className=\"reps-label\">\n                                                Reps\n                                            </label>\n                                            <input\n                                                className=\"reps-input\"\n                                                id=\"reps\" \n                                                type=\"text\"\n                                                placeholder=\"0\"\n                                                value={set.reps}\n                                                onChange={handleSetInfoChange(index, setIndex)}\n                                            />\n                                        </div>\n                                    </div>\n                                )\n                                break;\n                        }\n\n                        return (\n                            <div>\n                                <div className=\"set\">\n                                    {thingToRender}\n                                    {\n                                        setIndex === exercise.sets.length - 1 \n                                        ? \n                                        <button type=\"button\" onClick={() => addSet(index)} className=\"add-set-button\" >\n                                            <FontAwesomeIcon className=\"plus-icon\" icon={faPlus} />\n                                        </button>\n                                        : \n                                        <button type=\"button\" onClick={() => rmSet(index, setIndex)} className=\"remove-set-button\">\n                                            <FontAwesomeIcon className=\"minus-icon\" icon={faMinus} />\n                                        </button>\n                                    }\n                                </div>\n                                {\n                                    validationErrors[`set_${index}_${setIndex}`] \n                                    && \n                                    <div className=\"validation-error\">\n                                        <FontAwesomeIcon className=\"x-icon\" icon={faCircleXmark} />\n                                        {validationErrors[`set_${index}_${setIndex}`]}\n                                    </div>\n                                }\n                            </div>\n                        )\n                    }) \n                }\n            </div>\n        </div>\n    ))\n\n    return (\n        <div className=\"parent\">   \n            <form className=\"addworkout--form\" onSubmit={handleSubmit}>\n                <h1> Add Workout</h1>\n                <label className=\"date-input-label\" htmlFor=\"date-input\">\n                    Date:\n                </label>\n                <input\n                    className=\"date-input\"\n                    id=\"date-input\"\n                    type=\"date\"\n                    value={formData.date}\n                    onChange={handleDateChange}\n                >\n                </input>\n                {\n                    validationErrors[\"date\"] \n                    && \n                    <div className=\"validation-error\">\n                        <FontAwesomeIcon className=\"x-icon\" icon={faCircleXmark} />\n                        {validationErrors[\"date\"]}\n                    </div>\n                }\n\n                <button className=\"add-exercise-button\" type=\"button\" onClick={addExercise}>\n                    Add Exercise\n                </button>\n                {formDataExerciseElements}\n                {\n                    validationErrors[\"empty\"] \n                    && \n                    <div className=\"validation-error\">\n                        <FontAwesomeIcon className=\"x-icon\" icon={faCircleXmark} />\n                        {validationErrors[\"empty\"]}\n                    </div>\n                }\n                <button type=\"button\" onClick={clearForm} className=\"submit--button\">\n                    Clear Form\n                </button>\n                <button className=\"submit--button\">\n                    Submit\n                </button>\n            </form>\n        </div>\n    )\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}