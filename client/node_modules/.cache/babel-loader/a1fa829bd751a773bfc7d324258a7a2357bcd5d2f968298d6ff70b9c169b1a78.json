{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Projects/fitness-tracker/client/src/components/pages/HomePage.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function (props) {\n  //     function findRecentConsecutiveEntries(datesObject) {\n  //         // Convert object keys to date array and sort in descending order\n  //         if (Object.keys(datesObject).length === 0) {\n  //             return 0;\n  //         }\n\n  //         const sortedDates = Object.keys(datesObject).sort((a, b) => new Date(b) - new Date(a));\n\n  //         let currentStreak = 1;\n  //         let mostRecentDate = new Date(sortedDates[0]);\n\n  //         for (let i = 1; i < sortedDates.length; i++) {\n  //             const currentDate = new Date(sortedDates[i]);\n  //             const expectedDate = new Date(mostRecentDate);\n  //             expectedDate.setDate(expectedDate.getDate() - currentStreak);\n\n  //             if (currentDate.getTime() === expectedDate.getTime()) {\n  //                 currentStreak++;\n  //             } else {\n  //                 break; // Streak is broken\n  //             }\n  //         }\n\n  //         return currentStreak;\n  //     }\n\n  //     function findConsecutiveWeeklyEntries(datesObject) {\n  //         // Helper function to get the start of the week (Monday) for a given date\n  //         function getStartOfWeek(date) {\n  //             const startOfWeek = new Date(date);\n  //             startOfWeek.setHours(0, 0, 0, 0); // normalize time to start of the day\n  //             const dayOfWeek = startOfWeek.getDay();\n  //             const diff = startOfWeek.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1); // adjust when day is Sunday\n  //             startOfWeek.setDate(diff);\n  //             return startOfWeek;\n  //         }\n\n  //         // Convert object keys to date array and sort in descending order\n  //         const sortedDates = Object.keys(datesObject).sort((a, b) => new Date(b) - new Date(a));\n\n  //         if (sortedDates.length === 0) {\n  //             return 0; // No entries, so no streak\n  //         }\n\n  //         let currentStreak = 0;\n  //         let lastWeekStart = null;\n\n  //         for (const dateStr of sortedDates) {\n  //             const date = new Date(dateStr);\n  //             const weekStart = getStartOfWeek(date);\n\n  //             if (!lastWeekStart || weekStart.getTime() < lastWeekStart.getTime()) {\n  //                 currentStreak++;\n  //                 lastWeekStart = weekStart;\n  //             }\n  //         }\n\n  //         return currentStreak;\n  //     }\n\n  //     const val = findRecentConsecutiveEntries(props.workouts)\n  //     const val2 = findConsecutiveWeeklyEntries(props.workouts)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"parent\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"welcome-text\",\n      children: \"Welcome Back!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"day-streak-parent\",\n      children: [\"How Many Days In A Row You've Worked Out For:\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"day-streak-num\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"week-streak-parent\",\n      children: [\"How Many Weeks In A Row You've Worked Out For:\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"week-streak-num\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), !(val === 0 || val2 === 0) ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"keep-it-up\",\n      children: \"Keep it Up!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 43\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"keep-it-up\",\n      children: \"Get Started!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 89\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","props","className","children","fileName","_jsxFileName","lineNumber","columnNumber","val","val2"],"sources":["/home/kevin/Projects/fitness-tracker/client/src/components/pages/HomePage.js"],"sourcesContent":["import React from \"react\";\n\nexport default function (props) {\n\n//     function findRecentConsecutiveEntries(datesObject) {\n//         // Convert object keys to date array and sort in descending order\n//         if (Object.keys(datesObject).length === 0) {\n//             return 0;\n//         }\n\n//         const sortedDates = Object.keys(datesObject).sort((a, b) => new Date(b) - new Date(a));\n    \n//         let currentStreak = 1;\n//         let mostRecentDate = new Date(sortedDates[0]);\n    \n//         for (let i = 1; i < sortedDates.length; i++) {\n//             const currentDate = new Date(sortedDates[i]);\n//             const expectedDate = new Date(mostRecentDate);\n//             expectedDate.setDate(expectedDate.getDate() - currentStreak);\n    \n//             if (currentDate.getTime() === expectedDate.getTime()) {\n//                 currentStreak++;\n//             } else {\n//                 break; // Streak is broken\n//             }\n//         }\n    \n//         return currentStreak;\n//     }\n\n//     function findConsecutiveWeeklyEntries(datesObject) {\n//         // Helper function to get the start of the week (Monday) for a given date\n//         function getStartOfWeek(date) {\n//             const startOfWeek = new Date(date);\n//             startOfWeek.setHours(0, 0, 0, 0); // normalize time to start of the day\n//             const dayOfWeek = startOfWeek.getDay();\n//             const diff = startOfWeek.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1); // adjust when day is Sunday\n//             startOfWeek.setDate(diff);\n//             return startOfWeek;\n//         }\n    \n//         // Convert object keys to date array and sort in descending order\n//         const sortedDates = Object.keys(datesObject).sort((a, b) => new Date(b) - new Date(a));\n    \n//         if (sortedDates.length === 0) {\n//             return 0; // No entries, so no streak\n//         }\n    \n//         let currentStreak = 0;\n//         let lastWeekStart = null;\n    \n//         for (const dateStr of sortedDates) {\n//             const date = new Date(dateStr);\n//             const weekStart = getStartOfWeek(date);\n    \n//             if (!lastWeekStart || weekStart.getTime() < lastWeekStart.getTime()) {\n//                 currentStreak++;\n//                 lastWeekStart = weekStart;\n//             }\n//         }\n    \n//         return currentStreak;\n//     }\n\n//     const val = findRecentConsecutiveEntries(props.workouts)\n//     const val2 = findConsecutiveWeeklyEntries(props.workouts)\n\n    return (\n        <div className=\"parent\">\n            <h1 className=\"welcome-text\">\n                Welcome Back!\n            </h1>\n            <div className=\"day-streak-parent\">\n                How Many Days In A Row You've Worked Out For:  \n                <div className=\"day-streak-num\">\n                    {/* {val} */}\n                </div>           \n            </div>\n            <div className=\"week-streak-parent\">\n                How Many Weeks In A Row You've Worked Out For:\n                <div className=\"week-streak-num\">\n                    {/* {val2} */}\n                </div>\n            </div>\n            {!(val === 0 || val2 === 0) ? <h1 className=\"keep-it-up\">Keep it Up!</h1> : <h1 className=\"keep-it-up\">Get Started!</h1>}\n            \n        </div>\n    )\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,eAAe,UAAUC,KAAK,EAAE;EAEhC;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEI,oBACID,OAAA;IAAKE,SAAS,EAAC,QAAQ;IAAAC,QAAA,gBACnBH,OAAA;MAAIE,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAC;IAE7B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACLP,OAAA;MAAKE,SAAS,EAAC,mBAAmB;MAAAC,QAAA,GAAC,+CAE/B,eAAAH,OAAA;QAAKE,SAAS,EAAC;MAAgB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE1B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eACNP,OAAA;MAAKE,SAAS,EAAC,oBAAoB;MAAAC,QAAA,GAAC,gDAEhC,eAAAH,OAAA;QAAKE,SAAS,EAAC;MAAiB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE3B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,EACL,EAAEC,GAAG,KAAK,CAAC,IAAIC,IAAI,KAAK,CAAC,CAAC,gBAAGT,OAAA;MAAIE,SAAS,EAAC,YAAY;MAAAC,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,gBAAGP,OAAA;MAAIE,SAAS,EAAC,YAAY;MAAAC,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEvH,CAAC;AAEd"},"metadata":{},"sourceType":"module","externalDependencies":[]}